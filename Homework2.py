# author = Шумская Екатерина Алексеевна

# 1. Создать список и заполнить его элементами различных
# типов данных. Реализовать скрипт проверки типа данных
# каждого элемента. Использовать функцию type() для проверки
# типа. Элементы списка можно не запрашивать у пользователя,
# а указать явно, в программе.

my_list = []
my_list.append(7)
my_list.append('number')
my_list.append(True)
my_list.append(2.65)
my_list.append({'name': 'Pol', 'age': 20})
my_list.append([1, 5, 'name'])
for i in range(0, len(my_list)):
    print(type(my_list[i]))


# 2. Для списка реализовать обмен значений соседних элементов,
# т.е. Значениями обмениваются элементы с индексами 0 и 1, 2
# и 3 и т.д. При нечетном количестве элементов последний
# сохранить на своем месте. Для заполнения списка элементов
# необходимо использовать функцию input().

my_list = []
while True:
    el = input('Введите элемент списка, что бы закончить ввод, наберите end: ')
    if el == 'end':
        break
    my_list.append(el)
print(my_list)
for i in range(0, len(my_list)-1, 2):
    my_list[i], my_list[i+1] = my_list[i+1], my_list[i]
print(my_list)


# 3. Пользователь вводит месяц в виде целого числа от 1 до 12.
# Сообщить к какому времени года относится месяц (зима, весна,
# лето, осень). Напишите решения через list и через dict.

# Решение с помощью словаря

months = {0: 'зима',
          1: 'весна',
          2: 'лето',
          3: 'осень',
          4: 'зима'
}

number = input('Введите номер месяца: ')
if number.isdigit() and int(number) in range(1, 13):
    number = int(number) // 3
    print(f'Время года: {months[number]}')
else:
    print('Вы ввели некоректные данные')


# Решение с помощью списка

number1 = input('Введите номер месяца: ')
season_list = ('зима', 'весна', 'лето', 'осень')
if number1.isdigit() and int(number1) in range(1, 13):
    number1 = int(number1) // 3
    if number1 > 3:
        number1 = number1 - 4
    print(f'Время года: {season_list[number1]}')
else:
    print('Вы ввели некоректные данные')


# 4. Пользователь вводит строку из нескольких слов,
# разделённых пробелами. Вывести каждое слово с новой
# строки. Строки необходимо пронумеровать. Если в слово
# длинное, выводить только первые 10 букв в слове.

# Решение через функцию range
user_text = input('Введите строку: ')
my_list = user_text.split()
for i in range(len(my_list)):
    print(f'{i + 1} {str(my_list[i])[:10]}')

# Решение через функцию enumerate

user_text = input('Введите строку: ')
my_list = user_text.split()
for i, el in enumerate(my_list):
    print(f'{i+1} {el[:10]}')


# 5. Реализовать структуру «Рейтинг», представляющую собой не
# возрастающий набор натуральных чисел. У пользователя
# необходимо запрашивать новый элемент рейтинга.
# Если в рейтинге существуют элементы с одинаковыми значениями,
# то новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
# Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

my_list = [7, 5, 5, 3, 3, 2]

while True:
    new_el = input('Введите элемент рейтинга, для выхода введите '
                   'любой знак, отличный от натурального числа: ')
    list_position = []
    if new_el.isdigit():
        new_el = int(new_el)
        for i in range(0, len(my_list)):
            if new_el > my_list[i]:
            # Создаю список позиций, на которых новый элемент больше элемента списка, самое первое значение этого
            # списка и будет тем местом, куда его нужно вставить
                list_position.append(i)
        if list_position == []:
# Если новый элемент меньше любого элемента списка, в список позиций добавляем максимальное значение, что бы добавить
# элемент в конец списка
            list_position.append(len(my_list))
        my_list.insert(list_position[0], new_el)
        print(my_list)
    else:
        break

# 6. * Реализовать структуру данных «Товары».
# Она должна представлять собой список кортежей.
# Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и
# словарь с параметрами (характеристиками товара:
# название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е.
# запрашивать все данные у пользователя.
# Пример готовой структуры:
# [
# (1, {“название”: “компьютер”, “цена”: 20000, “количество”: 5, “eд”: “шт.”}),
# (2, {“название”: “принтер”, “цена”: 6000, “количество”: 2, “eд”: “шт.”}),
# (3, {“название”: “сканер”, “цена”: 2000, “количество”: 7, “eд”: “шт.”})
# ]
# Необходимо собрать аналитику о товарах. Реализовать словарь,
# в котором каждый ключ — характеристика товара, например название,
# а значение — список значений-характеристик, например список названий товаров.
# Пример:
# {
# “название”: [“компьютер”, “принтер”, “сканер”],
# “цена”: [20000, 6000, 2000],
# “количество”: [5, 2, 7],
# “ед”: [“шт.”]
# }

list_products = []      # Список, в который будем собирать структуру
dict_out = {}           # Итоговый словарь, в который будем собирать аналитику
keys_input = input('Введите характеристики товара через запятую: ')
list_keys = keys_input.split(',')       # Список ключей, по которым собирается аналитика
count = input('Введите количество товаров: ')  # Сразу запрашиваем у пользователя сколько товаров он будет вводить
if count.isdigit():
    count = int(count)
    for i in range(1, count+1):
        dict_product = {}               # Словарь с параметрами
        for key in list_keys:
            a = input(f'Товар {i}. Введите значение для {key}: ')
# Проверим, число ли ввели. Преобразуем его в int, при необходимости словарь по этому ключу можно
# будет просуммировать или произвести c ним другие арифметические действия
            if a.isdigit():
                a = int(a)
            dict_product.update({key: a})
        my_tuple = (i,dict_product)    # Кортеж, из которых состоит список
        list_products.insert(i-1, my_tuple)    # Структура данных "Товары" собрана
    print(f'Структура данных "Товары": {list_products}')

    for key in list_keys:           # По ключу выбираем данные для аналитики
        list_values = []
        for i in range(0, count):
            list_values.insert(i, list_products[i][1][key])
        dict_out.update({key: list_values})
    print(f'Аналитика: {dict_out}')
else:
    print('Вы ввели некорректные данные')