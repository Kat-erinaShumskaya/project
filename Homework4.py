# Шумская Екатерина Алексеевна

# 2. Представлен список чисел. Необходимо вывести элементы исходного
# списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

old_list1 = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list1 = [old_list1[i] for i in range(1, len(old_list1)) if old_list1[i] > old_list1[i-1]]
print(new_list1)

# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

list3 = [i for i in range(20, 241) if (i % 20 == 0 or i % 21 == 0)]
print(list3)


# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести
# в порядке их следования в исходном списке. Для выполнения задания обязательно
# использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

old_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in old_list if old_list.count(el) == 1]
print(new_list)


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить
# результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce


def fact(pr_el, el):
    el = pr_el * el
    return el


list5 = [i for i in range(100, 1001) if i % 2 == 0]
print(list5)
result = reduce(fact, [el for el in list5])
print(result)


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом:
# for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только
# первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

# Вариант с reduce и функцией, умножающей текущее число на предыдущее


def generator(number):
    fact_list = [reduce(fact, [i for i in range(1, j + 1)]) for j in range(1, number + 1)]
    for el in fact_list:
        yield el


n = input('Введите число: ')
try:
    n = int(n)
    for el in generator(n):
        print(el)
except ValueError:
    print('Вы указали не целое положительное число')


# Вариант с функцией factorial из модуля math
from math import factorial


def generator1(number):
    fact_list = [factorial(i) for i in range(1, number + 1)]
    for el in fact_list:
        yield el


try:
    n = int(n)
    for el in generator1(n):
        print(el)
except ValueError:
    print('Вы указали не целое положительное число')
