# Шумская Екатерина Алексеевна

# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток,
# соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух
# клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
# ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет
# строку: *****\n*****\n*****.


class Cell:
    def __init__(self, c_count):
        if type(c_count) == int:
            self.c_count = c_count
        else:
            self.c_count = 0
            print('Ошибка ввода данных')

    def __add__(self, other):
        a = self.c_count + other.c_count
        return Cell(a).c_count

    def __sub__(self, other):
        a = self.c_count - other.c_count
        if a > 0:
            return Cell(a).c_count
        else:
            return 'Невозможно произвести вычитание'

    def __mul__(self, other):
        a = self.c_count * other.c_count
        return Cell(a).c_count

    def __truediv__(self, other):
        if self.c_count >= other.c_count:
            a = self.c_count // other.c_count
            return Cell(a).c_count
        else:
            return 'Невозможно произвести деление'

    def make_order(self, number):
        a = self.c_count // number
        b = ('*' * number +'\\n') * a + '*' * (self.c_count % number)
        return b


for i in [1, 40]:
    print(Cell(90) + Cell(10+i))
    print(Cell(40) - Cell(10+i))
    print(Cell(9) * Cell(10+i))
    print(Cell(43) / Cell(10+i))
    print(Cell(43+i).make_order(7))


